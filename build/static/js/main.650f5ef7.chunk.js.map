{"version":3,"sources":["styled/index.js","components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["PageWrapper","styled","div","GameWrapper","Button","button","SquareButton","PlayerInfo","PlayerStatus","MoveList","li","BoardWrapper","BorderRow","Square","props","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","className","handleClick","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.650f5ef7.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const PageWrapper = styled.div`\n  /* margin: 20px; */\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-image: radial-gradient(#F8F9FD, #2997F1);\n`\n\nexport const GameWrapper = styled.div`\n  position: relative;\n  display: flex;\n`\n\nexport const GAmeInner = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n`\n\nexport const Button = styled.button`\n  /* display: inline; */\n  /* margin: 20px 0; */\n  height: 25px;\n  width: 120px;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  background: #dcab6f;\n  cursor: pointer;\n`\n\nexport const SquareButton = styled.button`\n  background: #f6fe81;\n  color: #173ef2;\n  border: 2px solid #4a2908;\n  /* border: none; */\n  border-radius: 10px;\n  /* float: left; */\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  width: 80px;\n  height: 80px;\n  text-align: center;\n  font-family: 'Special Elite', cursive;\n  font-size: 40px;\n  font-weight: bold;\n  line-height: 80px;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nexport const PlayerInfo = styled.div`\n  margin-left: 20px;\n  display: flex;\n  flex-direction: column;\n`\n\nexport const PlayerStatus = styled.div`\n  font-family: 'Special Elite', cursive;\n  color: #f40804;\n  width: 155px;\n`\n\nexport const MoveList = styled.li`\n  display: flex;\n  margin: 20px 0;\n`\n\nexport const BoardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const BorderRow = styled.div`\n  display: flex;\n  &:after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n`","import React from 'react'\nimport { SquareButton } from '../styled'\n\nexport default function Square(props) {\n    return (\n        <SquareButton\n            onClick={props.onClick}\n        >\n            {props.value}\n        </SquareButton>\n    )\n}","import React, { Component } from 'react'\nimport { BoardWrapper, BorderRow } from '../styled'\nimport Square from './Square'\n\nexport default class Board extends Component {\n    renderSquare(i) {\n        return <Square\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n        />\n    }\n    render() {\n        return (\n            <BoardWrapper>\n                <BorderRow>\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </BorderRow>\n                <BorderRow>\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </BorderRow>\n                <BorderRow>\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </BorderRow>\n            </BoardWrapper>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { GameWrapper, Button, PlayerInfo, PlayerStatus, MoveList } from '../styled'\nimport Board from './Board'\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xIsNext: true,\n            stepNumber: 0,\n            history: [\n                { squares: Array(9).fill(null) }\n            ]\n        }\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step%2) === 0 \n        })\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        const winner = calculateWinner(squares);\n        if(winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat({\n                squares: squares\n            }),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        })\n\n    }\n    render() {\n        const history = this.state.history\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const desc = move? \"Player's move \" + move : 'Start New Game';\n            return (\n                <MoveList \n                    key={move}>\n                    <Button onClick={() => {this.jumpTo(move)}}>\n                        {desc}\n                    </Button>\n                </MoveList>\n            )\n        })\n        let status;\n        if(winner) {\n            status = winner + \"'s win!\";\n        } else {\n            status = 'It is ' + (this.state.xIsNext? 'Dwight' : 'Jim') + \"'s turn\";\n        }\n\n\n        return (\n            <GameWrapper>\n                <div className=\"game-board\">\n                    <div className=\"title\">The Office: tic tac toe</div>\n                    <Board \n                        onClick={(i) => this.handleClick(i)}\n                        squares={current.squares}\n                    />\n                </div>\n                <PlayerInfo>\n                    <PlayerStatus>{status}</PlayerStatus>\n                    <ul>{moves}</ul>\n                </PlayerInfo>\n            </GameWrapper>\n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for(let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return squares[a];\n        }\n    }\n    \n    return null;\n}","import React from 'react';\nimport { PageWrapper } from './styled'\nimport './App.scss';\n\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <PageWrapper>\n      <Game />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}